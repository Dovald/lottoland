openapi: 3.0.3
info:
  title: Challenge Lottoland - Fernando Garcia Doval
  description: |-
    This is a technical test for the Senior Back-end position created by Fernando Garcia Doval in July 2023 using openapi and spring. They are asked to create two services, one that is capable of serving a game (Janken) and another that serves statistics on it to display them on a front.
  contact:
    email: dovald3362@gmail.com
  version: 1.0.0
servers:
  - url: https://localhost:8088/lottoland
tags:
  - name: Janken
    description: Play of Rock, Paper, Scissors.
  - name: Stats
    description: Statistics about the games.
paths:
  /janken/{sessionID}:
    post:
      tags:
        - Janken
      summary: Play a round of janken for one user.
      operationId: postRoundJankenBySession
      parameters:
        - name: sessionID
          in: path
          description: session generated by front simulating a user logged
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JankenDTO'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /janken/reset/{sessionID}:
    post:
      tags:
        - Janken
      summary: Reset the session of janken for one user.
      operationId: postResetJankenBySession
      parameters:
        - name: sessionID
          in: path
          description: session generated by front simulating a user logged
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: "OK"
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /stats/janken:
    get:
      tags:
        - Stats
      summary: Get global stats about janken game.
      operationId: getStatsJanken
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalStatsJankenDTO'
  /stats/janken/{sessionID}:
    get:
      tags:
        - Stats
      summary: Get stats about janken game for one user.
      operationId: getStatsJankenBySession
      parameters:
        - name: sessionID
          in: path
          description: session generated by front simulating a user logged
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsJankenDTO'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
components:
  schemas:
    GlobalStatsJankenDTO:
      type: object
      properties:
        TotalRounds:
          type: integer
          format: int64
          example: 250
        TotalP1Wins:
          type: integer
          format: int64
          example: 100
        TotalP2Wins:
          type: integer
          format: int64
          example: 80
        TotalTies:
          type: integer
          format: int64
          example: 70
    StatsJankenDTO:
      type: object
      properties:
        rounds:
          type: array
          items:
            $ref: '#/components/schemas/JankenDTO'
    JankenDTO:
      type: object
      properties:
        player1:
          type: string
          example: "Scissors"
        player2:
          type: string
          example: "Rock"
        result:
          type: string
          example: "Player2 Wins"
        playedAt:
          type: string
          example: "dd-MM-yyyy HH:mm:ss.SSS"
    ErrorDTO:
      type: object
      properties:
        errorMessage:
          type: string
          example: "Error Message"