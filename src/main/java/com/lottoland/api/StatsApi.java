/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.lottoland.api;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.lottoland.dto.ErrorDTO;
import com.lottoland.dto.GlobalStatsJankenDTO;
import com.lottoland.dto.StatsJankenDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-07-07T22:14:06.712861+02:00[Europe/Madrid]")
@Validated
@CrossOrigin
public interface StatsApi {

    @Operation(summary = "Get global stats about janken game.", description = "", tags={ "Stats" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GlobalStatsJankenDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/stats/janken",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GlobalStatsJankenDTO> getStatsJanken();


    @Operation(summary = "Get stats about janken game for one user.", description = "", tags={ "Stats" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = StatsJankenDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class))) })
    @RequestMapping(value = "/stats/janken/{sessionID}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StatsJankenDTO> getStatsJankenBySession(@Parameter(in = ParameterIn.PATH, description = "session generated by front simulating a user logged", required=true, schema=@Schema()) @PathVariable("sessionID") String sessionID);

}

